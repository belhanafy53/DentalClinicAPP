<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Remote.Linq.Text.Json</name>
    </assembly>
    <members>
        <member name="M:Remote.Linq.Text.Json.JsonSerializerOptionsExtensions.ConfigureRemoteLinq(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Configures <see cref="T:System.Text.Json.JsonSerializerOptions"/> and adds <see cref="T:System.Text.Json.Serialization.JsonConverter"/>s for <i>Aqua</i> and <i>Remote.Linq</i> types.
            </summary>
            <param name="options">Json serializer options to be ammended.</param>
        </member>
        <member name="M:Remote.Linq.Text.Json.JsonSerializerOptionsExtensions.ConfigureRemoteLinq(System.Text.Json.JsonSerializerOptions,Aqua.Text.Json.KnownTypesRegistry)">
            <summary>
            Configures <see cref="T:System.Text.Json.JsonSerializerOptions"/> and adds <see cref="T:System.Text.Json.Serialization.JsonConverter"/>s for <i>Aqua</i> and <i>Remote.Linq</i> types.
            </summary>
            <param name="options">Json serializer options to be ammended.</param>
            <param name="knownTypesRegistry">Type registry to control types for deserialization of <see cref="T:Aqua.Dynamic.DynamicObject"/>s.</param>
        </member>
        <member name="M:_Check.CheckNotNull``1(System.Nullable{``0},System.String)">
            <summary>
              Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="value"/> is <see langword="null"/>,
              otherwise the <paramref name="value"/> is returned.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <returns>The <paramref name="value"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckNotNull``1(``0,System.String)">
            <summary>
              Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="value"/> is <see langword="null"/>,
              otherwise the <paramref name="value"/> is returned.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <returns>The <paramref name="value"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
              Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="value"/> is <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:_Check.AssertNotNull``1(``0,System.String)">
            <summary>
              Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="value"/> is <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:_Check.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              Throws if <paramref name="items"/> is either <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="items"/> is empty.</exception>
            <returns>The <paramref name="items"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckNotNullOrEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
              Throws if <paramref name="items"/> is either <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="items"/> is empty.</exception>
            <returns>The <paramref name="items"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckNotNullOrEmpty``1(System.Collections.Generic.IReadOnlyList{``0},System.String)">
            <summary>
              Throws if <paramref name="items"/> is either <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="items"/> is empty.</exception>
            <returns>The <paramref name="items"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckNotNullOrEmpty``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.String)">
            <summary>
              Throws if <paramref name="items"/> is either <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="items"/> is empty.</exception>
            <returns>The <paramref name="items"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckNotNullOrEmpty``1(System.Collections.Generic.IReadOnlySet{``0},System.String)">
            <summary>
              Throws if <paramref name="items"/> is either <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="items"/> is empty.</exception>
            <returns>The <paramref name="items"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
              Throws if <paramref name="value"/> is either <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="items"/> is empty.</exception>
            <returns>The <paramref name="items"/> unless it's <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
              Throws if <paramref name="value"/> is either <see langword="null"/> or white space.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is white space.</exception>
            <returns>The <paramref name="value"/> unless it's <see langword="null"/> or white space.</returns>
        </member>
        <member name="M:_Check.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              Throws if <paramref name="items"/> is either <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="items"/> is empty.</exception>
        </member>
        <member name="M:_Check.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
              Throws if <paramref name="items"/> is either <see langword="null"/> or white space.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is white space.</exception>
        </member>
        <member name="M:_Check.CheckItemsNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              Throws if either <paramref name="items"/> or any element contained is <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If any element in <paramref name="items"/> is <see langword="null"/>.</exception>
            <returns>The <paramref name="items"/> unless it or any element contained is <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckItemsNotNull``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String)">
            <summary>
              Throws if either <paramref name="items"/> or any element contained is <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If any element in <paramref name="items"/> is <see langword="null"/>.</exception>
            <returns>The <paramref name="items"/> unless it or any element contained is <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckItemsNotNull``1(System.Collections.Generic.IReadOnlyList{``0},System.String)">
            <summary>
              Throws if either <paramref name="items"/> or any element contained is <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If any element in <paramref name="items"/> is <see langword="null"/>.</exception>
            <returns>The <paramref name="items"/> unless it or any element contained is <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.CheckItemsNotNull``1(System.Collections.Generic.IReadOnlySet{``0},System.String)">
            <summary>
              Throws if either <paramref name="items"/> or any element contained is <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If any element in <paramref name="items"/> is <see langword="null"/>.</exception>
            <returns>The <paramref name="items"/> unless it or any element contained is <see langword="null"/>.</returns>
        </member>
        <member name="M:_Check.AssertItemsNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              Throws if either <paramref name="items"/> or any element contained is <see langword="null"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If any element in <paramref name="items"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:_Check.AssertItemsNotNullOrEmpty(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
              Throws if either <paramref name="items"/> or any element contained is <see langword="null"/> or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If any element in <paramref name="items"/> is <see langword="null"/> or empty.</exception>
        </member>
        <member name="M:_Check.AssertItemsNotNullOrWhiteSpace(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
              Throws if either <paramref name="items"/> or any element contained is <see langword="null"/> or white space.
            </summary>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If any element in <paramref name="items"/> is <see langword="null"/> or white space.</exception>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
             <summary>
             Disables the built-in runtime managed/unmanaged marshalling subsystem for
             P/Invokes, Delegate types, and unmanaged function pointer invocations.
             </summary>
             <remarks>
             The built-in marshalling subsystem has some behaviors that cannot be changed due to
             backward-compatibility requirements. This attribute allows disabling the built-in
             subsystem and instead uses the following rules for P/Invokes, Delegates,
             and unmanaged function pointer invocations:
            
             - All value types that do not contain reference type fields recursively (<c>unmanaged</c> in C#) are blittable
             - Value types that recursively have any fields that have <c>[StructLayout(LayoutKind.Auto)]</c> are disallowed from interop.
             - All reference types are disallowed from usage in interop scenarios.
             - SetLastError support in P/Invokes is disabled.
             - varargs support is disabled.
             - LCIDConversionAttribute support is disabled.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that should not be used anymore.
            </remarks>
        </member>
    </members>
</doc>
